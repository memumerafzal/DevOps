name: demo_pipeline

on:
  push:
    branches:
      - demo_pipeline

jobs:
  #Job 1: build (Analyze & Test)
  build:
    name: Analyze & Test
    runs-on: windows-latest

    steps:
        #Step 1: Checkout Code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 #Downloads the latest code from the GitHub repository.
          
        #Step 2: Set up Java (Required for SonarQube)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17 #Installs Java 17 (required for SonarQube code analysis).
          distribution: 'zulu'

        #Step 3: Cache SonarQube Packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

        #Step 4: Set up .NET 7 SDK
      - name: Set up .NET 7.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.100

        #Step 5: Install SonarQube Scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner #Installs SonarQube scanner if it’s not cached.

      - name: Create .scannerwork directory
        shell: powershell
        run: |
          New-Item -Path .scannerwork -ItemType Directory -Force

        #Step 6: Build & Run SonarQube Analysis
      - name: Build and analyze
        shell: powershell
        run: |
          $metadataPath = "$env:GITHUB_WORKSPACE\.scannerwork\report-task.txt"
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Alfamd_BE_Demo" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" `
            /d:sonar.scanner.metadataFilePath="$metadataPath"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

        #Step 7: Check SonarQube Quality Gate
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
          scanMetadataReportFile: ".scannerwork/report-task.txt"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

        #Step 8: Stop pipeline if SonarQube Quality Gate Fails
      - name: Fail if Quality Gate fails
        if: steps.sonarqube-quality-gate-check.outputs.quality-gate-status != 'PASSED'
        run: exit 1
        
  #Job 2: filebuild (Build & Package Application)
  filebuild:
    name: Building and Packing Artifact
    runs-on: ubuntu-latest
    needs: build  # Add dependency on build job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setting up Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.100'

      - name: Building Project
        run: |
          dotnet publish

      - name: Verify files
        run: ls AdnarePM/bin/Debug/net7.0/publish/

      - name: Upload Artifact #Uploads the built AdnarePM_API application
        uses: actions/upload-artifact@v4
        with:
          name: Alfamd_BE_Demo
          path: AdnarePM/bin/Debug/net7.0/publish/ 
          
  #Job 3: deploy (Deploy to Windows Server)     
  deploy:
    name: Deploying to Windows Server
    runs-on: uat-server
    needs: [build, filebuild]  # Ensure both build and filebuild complete successfully

    steps:
      - name: Set Execution Policy
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope LocalMachine -Force
          Write-Output '✅ Execution Policy Set Successfully'
        shell: powershell

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: Alfamd_BE_Demo
          path: downloaded_artifact_be_demo

      - name: Stopping IIS
        run: |
          Import-Module WebAdministration
          Stop-Website -Name "AdnarePM_API"
          Write-Output '✅ IIS Stopped Successfully'
        shell: powershell

      - name: Backing Up and Deploying
        shell: python
        run: |
          import sys
          sys.stdout.reconfigure(encoding='utf-8')  # Ensure UTF-8 output
          from datetime import date
          import os
          import shutil
          
          sourcedir = r"F:\\Github_actions\\runner-2\\actions-runner\\_work\\adnarepm_be\\adnarepm_be\\downloaded_artifact_be_demo"
          dirpath = r"C:\\inetpub\\wwwroot\\AdnarePM_API"
          basebackupdir = f'F:\\IIS\\AdnarePM_API\\Backups\\Backup_{date.today()}\\BE'
          basereleasedir = f'F:\\IIS\\AdnarePM_API\\Releases\\Release_{date.today()}\\BE'

          # Function to Generate Unique Backup Path
          def get_unique_path(path):
              if not os.path.exists(path):
                  return path
              i = 1
              new_path = f"{path} ({i})"
              while os.path.exists(new_path):
                  i += 1
                  new_path = f"{path} ({i})"
              return new_path
              
          
          if not os.path.exists(sourcedir):
              print(f"❌ ERROR: Source directory {sourcedir} does not exist!")
              exit(1)

          # Backup existing IIS site
          backupdir = get_unique_path(basebackupdir)
          shutil.copytree(dirpath, backupdir, dirs_exist_ok=True)
          
        
          # Remove unnecessary files from the source directory
          for file in ["wwwroot", "appsettings.json", "web.config"]:
              filepath = os.path.join(sourcedir, file)
              if os.path.exists(filepath):
                  if os.path.isdir(filepath):
                      shutil.rmtree(filepath)
                  else:
                      os.remove(filepath)
                  print(f" Removed: {filepath}")
              else:
                  print(f"{file} not found, skipping.")

          # Backup new release
          releasedir = get_unique_path(basereleasedir)
          shutil.copytree(sourcedir, releasedir, dirs_exist_ok=True)
          
          # Ensure destination directory exists
          if not os.path.exists(dirpath):
              os.mkdir(dirpath)
              
          # Deploy new files to IIS folder
          shutil.copytree(sourcedir, dirpath, dirs_exist_ok=True)
          
          # Cleanup source directory
          shutil.rmtree(sourcedir)
          print(" ✅Deployment completed successfully")
          
      - name: Starting IIS
        shell: powershell
        run: |
          Import-Module WebAdministration
          Start-Website -Name "AdnarePM_API"
          Write-Output "✅ IIS Started Successfully"
